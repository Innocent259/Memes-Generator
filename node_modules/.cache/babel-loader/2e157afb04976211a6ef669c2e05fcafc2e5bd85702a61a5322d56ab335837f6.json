{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christian\\\\Desktop\\\\memeGenerator\\\\meme-generator\\\\src\\\\Components\\\\Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Meme() {\n  _s();\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"https://i.imgflip.com/30b1gx.jpg\"\n  });\n  const [allMemes, setAllMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res = res.json()).then(data => setAllMemes(data.data.memes));\n  });\n  function handleChange() {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setAllMemes(prevState);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"topText\",\n        name: \"topText\",\n        className: \"form-input\",\n        placeholder: \"Top text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"bottomText\",\n        name: \"bottomText\",\n        className: \"form-input\",\n        placeholder: \"Bottom text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-btn\",\n        children: \"Get a new meme image  \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"xmbY7Tp25k6VpO7SYX+/INSafI4=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","useEffect","Meme","meme","setMeme","topText","bottomText","randomImage","allMemes","setAllMemes","fetch","then","res","json","data","memes","handleChange","randomNumber","Math","floor","random","length","url","prevState"],"sources":["C:/Users/Christian/Desktop/memeGenerator/meme-generator/src/Components/Meme.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nfunction Meme() {\r\n    const [meme, setMeme] = useState({\r\n        topText: \"\",\r\n        bottomText: \"\", \r\n        randomImage: \"https://i.imgflip.com/30b1gx.jpg\"\r\n\r\n    })\r\n    const [allMemes, setAllMemes] = useState([])\r\n    \r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res = res.json())\r\n        .then(data => setAllMemes(data.data.memes))\r\n\r\n    })\r\n    function handleChange() {\r\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\r\n        const url = allMemes[randomNumber].url\r\n        setAllMemes(prevState)\r\n    }\r\n    return(\r\n        <main>\r\n            <div className=\"meme-form\">\r\n                <input \r\n                type=\"text\"\r\n                id=\"topText\"\r\n                name=\"topText\"\r\n                className=\"form-input\"\r\n                placeholder=\"Top text\"\r\n                />\r\n                        \r\n                <input \r\n                type=\"text\"\r\n                id=\"bottomText\"\r\n                name=\"bottomText\"\r\n                className=\"form-input\"\r\n                placeholder=\"Bottom text\"\r\n                \r\n                />\r\n                <button className=\"btn-btn\">Get a new meme image  ðŸ–¼</button>\r\n\r\n                      \r\n           </div>\r\n        </main>\r\n        \r\n    )\r\n}\r\nexport default Meme"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAA;AAChD,SAASC,IAAI,GAAG;EAAA;EACZ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC;IAC7BK,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EAEjB,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZS,KAAK,CAAC,mCAAmC,CAAC,CACzCC,IAAI,CAACC,GAAG,GAAGA,GAAG,CAACC,IAAI,EAAE,CAAC,CACtBF,IAAI,CAACG,IAAI,IAAIL,WAAW,CAACK,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAAC;EAE/C,CAAC,CAAC;EACF,SAASC,YAAY,GAAG;IACpB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGZ,QAAQ,CAACa,MAAM,CAAC;IAChE,MAAMC,GAAG,GAAGd,QAAQ,CAACS,YAAY,CAAC,CAACK,GAAG;IACtCb,WAAW,CAACc,SAAS,CAAC;EAC1B;EACA,oBACI;IAAA,uBACI;MAAK,SAAS,EAAC,WAAW;MAAA,wBACtB;QACA,IAAI,EAAC,MAAM;QACX,EAAE,EAAC,SAAS;QACZ,IAAI,EAAC,SAAS;QACd,SAAS,EAAC,YAAY;QACtB,WAAW,EAAC;MAAU;QAAA;QAAA;QAAA;MAAA,QACpB,eAEF;QACA,IAAI,EAAC,MAAM;QACX,EAAE,EAAC,YAAY;QACf,IAAI,EAAC,YAAY;QACjB,SAAS,EAAC,YAAY;QACtB,WAAW,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAEvB,eACF;QAAQ,SAAS,EAAC,SAAS;QAAA,UAAC;MAAwB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EAG5D;IAAA;IAAA;IAAA;EAAA,QACF;AAGf;AAAC,GA9CQrB,IAAI;AAAA,KAAJA,IAAI;AA+Cb,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}